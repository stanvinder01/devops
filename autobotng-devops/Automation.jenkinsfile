def REMOTE = null
def REMOTE_SSH_IP = '192.168.11.21'
def REMOTE_SSH_PORT = 8642
def REMOTE_BASE_DIR = '/tmp/automation'
def AUTOMATION_DIR='/opt/automation'
def CURRENT_BROWSER=''

def executeOnRemote = {

  withCredentials([usernamePassword(credentialsId: "${params.JENKINS_CREDS}", passwordVariable: 'JENKINS_CREDS_PASS', usernameVariable: 'JENKINS_CREDS_USER')]) {
    sshCommand remote: REMOTE, command: "bash ${REMOTE_BASE_DIR}/autobot/scripts/setup-remote.sh ${REMOTE_BASE_DIR} ${AUTOMATION_DIR}", sudo: true
  }

  withMaven(mavenSettingsConfig: "${MVN_SETTINGS}", maven: "${TOOL_MVN}", jdk: "${TOOL_JDK}") {
    sh "mvn -f MSB-WEB/msb/database/pom.xml flyway:migrate -Dflyway.user=msb -Dflyway.password=msb -Dflyway-profile=automation -Dflyway.url=jdbc:mysql://${REMOTE_SSH_IP}:3306/msb'?useUnicode=true&connectionCollation=utf8_unicode_ci&characterSetResults=utf8&characterEncoding=UTF-8&useSSL=false&createDatabaseIfNotExist=true&max_allowed_packet=1070596096&serverTimezone=America/New_York'"
  }

  withCredentials([usernamePassword(credentialsId: "${params.JENKINS_CREDS}", passwordVariable: 'JENKINS_CREDS_PASS', usernameVariable: 'JENKINS_CREDS_USER')]) {
    sshCommand remote: REMOTE, command: "bash ${REMOTE_BASE_DIR}/autobot/scripts/execute-scripts.sh ${AUTOMATION_DIR} ${CURRENT_BROWSER} ${params.MODE} ${params.RUN_ID} ${params.CASE_IDS} ${params.INSTANCE}", sudo: true
  }

}


pipeline {
    agent any

    environment {
        MVN_SETTINGS = 'nexus37Maven'
        TOOL_JDK = 'LocalJDK8'
        TOOL_MVN = 'Maven3.6'
    }

    tools {
        maven "${TOOL_MVN}"
        jdk "${TOOL_JDK}"
    }

    parameters {
        booleanParam defaultValue: true, description: 'Build Projects', name: 'BUILD_PROJECTS'
        choice(name: 'BUILD_SOURCE', choices: ['branch','tag','refspec'], description: 'Build From Branch, Tag or Refspec')
        string(name: 'BUILD_VALUE', defaultValue: 'release', trim: true,  description: 'Value of Branch (e.g. master, release), Tag (e.g. v1.0.0) or Refspec (e.g. 77/9377/1)')
        choice choices: ['ALL','SELECTIVE','RUN'], description: 'Mode', name: 'MODE'
        string defaultValue: '-1', description: 'Run ID', name: 'RUN_ID', trim: true
        string defaultValue: '-1', description: 'Case IDs', name: 'CASE_IDS', trim: true
        choice choices: ['10','5','3','1'], description: 'Number of Instance(s)', name: 'INSTANCE'
        booleanParam defaultValue: true, description: 'Chrome', name: 'BROWSER_CHROME'
        booleanParam defaultValue: true, description: 'Mozilla', name: 'BROWSER_MOZILLA'
        credentials credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl', defaultValue: 'servsupport', description: 'Credentials to be used for automation server', name: 'JENKINS_CREDS'
    }

    stages {
        stage('Git Checkout') {
          parallel {
            stage('Checkout MSB WEB') {
              steps {
                dir ('MSB-WEB') {
                  script {
                    def finalBuildUrl = ''
                    def finalrefspecUrl = ''
                    if(params.BUILD_SOURCE == 'branch') {
                      def actualBranch = params.BUILD_VALUE
                      if(!actualBranch.startsWith('origin/')) {
                        actualBranch = 'origin/' + actualBranch
                      }
                      finalBuildUrl = 'refs/remotes/' + actualBranch
                    } else if(params.BUILD_SOURCE == 'tag') {
                      finalBuildUrl = 'refs/tags/' + params.BUILD_VALUE
                    } else if(params.BUILD_SOURCE == 'refspec') {
                      finalBuildUrl = 'refs/changes/' + params.BUILD_VALUE
                      finalrefspecUrl = finalBuildUrl + ':' + finalBuildUrl
                    }
                    echo 'Final Build URL: ' + finalBuildUrl
                    echo 'Final Refspec: ' + finalrefspecUrl
                    def scmVars =  checkout([$class: 'GitSCM', branches: [[name: "${finalBuildUrl}"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CloneOption', honorRefspec: true, noTags: false, reference: '', shallow: false], [$class: 'CleanBeforeCheckout']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'jenkins-gerrit', refspec: "${finalrefspecUrl}", url: 'http://192.168.11.160:8080/MSB']]])
                    echo 'SCM Commit id: ' +scmVars.GIT_COMMIT
                    echo 'SCM Branch: ' +scmVars.GIT_BRANCH
                  }
                }
              }
            }
            stage('Checkout MSB Autobot') {
              steps {
                dir ('MSB-AUTOBOT') {
                  checkout([$class: 'GitSCM', branches: [[name:"*/master"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CheckoutOption']], submoduleCfg: [], userRemoteConfigs: [[url: 'http://192.168.11.160:8080/AutobotNG.git', credentialsId:'jenkins-gerrit']]])
                }
              }
            }
          }
        }

        stage('Build Projects') {
          when {
             expression {
                return params.BUILD_PROJECTS
             }
          }
          parallel {
            stage('Build MSB WEB') {
              steps {
                withMaven(mavenSettingsConfig: "${MVN_SETTINGS}", maven: "${TOOL_MVN}", jdk: "${TOOL_JDK}") {
                  sh 'mvn -f MSB-WEB/msb/pom.xml clean package -DskipTests -U -P ui-build'
                }
              }
            }
            stage('Build MSB Autobot') {
              steps {
                withMaven(mavenSettingsConfig: "${MVN_SETTINGS}", maven: "${TOOL_MVN}", jdk: "${TOOL_JDK}") {
                  sh 'mvn -f MSB-AUTOBOT/autobot-ng/pom.xml clean deploy'
                }
              }
            }
          }
        }

      stage('Setup Remote') {
        steps {
            withCredentials([usernamePassword(credentialsId: "${params.JENKINS_CREDS}", passwordVariable: 'JENKINS_CREDS_PASS', usernameVariable: 'JENKINS_CREDS_USER')]) {
              script {
                  REMOTE =  [:]
                  REMOTE.name = REMOTE_SSH_IP
                  REMOTE.host = REMOTE_SSH_IP
                  REMOTE.user = env.JENKINS_CREDS_USER
                  REMOTE.password = env.JENKINS_CREDS_PASS
                  REMOTE.logLevel = 'WARNING'
                  REMOTE.allowAnyHosts = true
                  REMOTE.port = REMOTE_SSH_PORT
              }

              sshCommand remote: REMOTE, command: "rm -rf ${REMOTE_BASE_DIR}/autobot"
              sshCommand remote: REMOTE, command: "mkdir -p ${REMOTE_BASE_DIR}/autobot"
              sshPut remote: REMOTE, from: "MSB-AUTOBOT/autobot-ng/autobotng-devops/docker", into: "${REMOTE_BASE_DIR}/autobot"
              sshPut remote: REMOTE, from: "MSB-AUTOBOT/autobot-ng/autobotng-devops/scripts", into: "${REMOTE_BASE_DIR}/autobot"
          }
        }
      }

      stage('Transfer war file') {
        when {
           expression {
              return params.BUILD_PROJECTS
           }
        }
        steps {
          sshPut remote: REMOTE, from: "MSB-WEB/msb/msb-rest/target/mysignaturebook.war", into: "${REMOTE_BASE_DIR}/app"
        }
      }

      stage('Test on Chrome') {
        when {
           expression {
              return params.BROWSER_CHROME
           }
        }
        steps {
          script {
            CURRENT_BROWSER = 'chrome'
            executeOnRemote()
          }
        }
      }

      stage('Test on Mozilla') {
        when {
           expression {
              return params.BROWSER_MOZILLA
           }
        }
        steps {
          script {
            CURRENT_BROWSER = 'mozilla'
            executeOnRemote()
          }
        }
      }
    }

    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '1', daysToKeepStr: '', numToKeepStr: '1')
        durabilityHint 'PERFORMANCE_OPTIMIZED'
        disableConcurrentBuilds()
    }
}
