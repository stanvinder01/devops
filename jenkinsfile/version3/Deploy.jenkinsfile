def CURRENT_USER = ''
def CURRENT_IP = ''
def REMOTE = null
def REMOTE_BASE_DIR = '/tmp/jenkins/msb3'
def WAR_FILE = 'msb/msb-rest/target/mysignaturebook.war'
def USER_VAR = '';
def deploy = {
              sshCommand remote: REMOTE, command: "rm -rf ${REMOTE_BASE_DIR}"
              sshCommand remote: REMOTE, command: "mkdir -p ${REMOTE_BASE_DIR}"
              sshPut remote: REMOTE, from: "${WAR_FILE}", into: "${REMOTE_BASE_DIR}"
           }

pipeline {
    agent any

    parameters {
      string(name: 'BUILD_NO', defaultValue: '', trim: true,  description: 'Build number of Platform Jobs/Version-3/Build job')
      booleanParam defaultValue: false, description: 'Is Jumphost server?', name: 'IS_JUMPHOST'
      string defaultValue: '', description: 'IP of server', name: 'SERVER_IP', trim: true
      string defaultValue: '8642', description: 'Port of server', name: 'SERVER_PORT', trim: true
      string defaultValue: 'servsupport', description: 'Username', name: 'USERNAME', trim: true
      password(name: 'PASSWORD', defaultValue: '', description: 'Server password or Passphrase')
    }

    stages {

        stage('Check Access') {
          when {
            expression {
               wrap([$class: 'BuildUser']) {
                 CURRENT_USER = env.BUILD_USER_ID
              }

              CURRENT_IP = params.SERVER_IP

              configFileProvider([configFile(fileId: 'protected-servers-config', variable: 'accessCheckFile')]) {
                def accessCheckProps = readProperties file: "$accessCheckFile"
                def msb_prod_ips = accessCheckProps['msb-prod-ips']
                def msb_prod_allowed_users = accessCheckProps['msb-prod-allowed-users']
                def msb_uat_ips = accessCheckProps['msb-uat-ips']
                def msb_uat_allowed_users = accessCheckProps['msb-uat-allowed-users']

                if(msb_prod_ips.tokenize(',').contains(CURRENT_IP)){
                  if(msb_prod_allowed_users.tokenize(',').contains(CURRENT_USER)) {
                    return false
                  } else {
                    return true
                  }
                } else if(msb_uat_ips.tokenize(',').contains(CURRENT_IP)){
                  if(msb_uat_allowed_users.tokenize(',').contains(CURRENT_USER)) {
                    return false
                  } else {
                    return true
                  }
                } else {
                   return false
                }
              }
            }
          }

          steps {
            error('User not allowed to run job on input IP')
          }
        }

        stage('Copy Artifact') {
          steps {
            copyArtifacts filter: "${WAR_FILE}", projectName: '/Platform Jobs/Version-3/Build', selector: specific("${params.BUILD_NO}")
          }
        }

        stage('Transfer Artifact') {
          steps {
            script {
                echo 'File can be find in directory' + REMOTE_BASE_DIR
                REMOTE =  [:]
                REMOTE.name = params.SERVER_IP
                REMOTE.host = params.SERVER_IP
                REMOTE.user = params.USERNAME
                REMOTE.logLevel = 'WARNING'
                REMOTE.allowAnyHosts = true
                REMOTE.port = params.SERVER_PORT.toInteger()

                if(params.IS_JUMPHOST) {
                  withCredentials([sshUserPrivateKey(credentialsId: 'jumphost', keyFileVariable: 'jumphostidentity')]) {
                    REMOTE.identityFile = jumphostidentity
                    REMOTE.passphrase = params.PASSWORD;
                    script {
                      deploy ()
                    }
                  }
                } else {
                  REMOTE.password = params.PASSWORD
                  script {
                      deploy ()
                  }
                }
            }
          }
        }
    }

    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '1', daysToKeepStr: '', numToKeepStr: '1')
        durabilityHint 'PERFORMANCE_OPTIMIZED'
        disableConcurrentBuilds()
    }
}
