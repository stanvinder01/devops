pipeline {
    agent any

    environment {
        MVN_SETTINGS = 'nexus37Maven'
        TOOL_JDK = 'LocalJDK8'
        TOOL_MVN = 'Maven3.6'
    }

    tools {
        maven "${TOOL_MVN}"
        jdk "${TOOL_JDK}"
    }

    parameters {
      choice(name: 'BUILD_SOURCE', choices: ['branch','tag','refspec'], description: 'Build From Branch, Tag or Refspec')
      string(name: 'BUILD_VALUE', defaultValue: 'master', trim: true,  description: 'Value of Branch (e.g. master, release), Tag (e.g. v1.0.0) or Refspec (e.g. 77/9377/1)')
    }

    stages {
        stage('Git Checkout') {
          steps {
            script {
              def finalBuildUrl = ''
              def finalrefspecUrl = ''
              if(params.BUILD_SOURCE == 'branch') {
                def actualBranch = params.BUILD_VALUE
                if(!actualBranch.startsWith('origin/')) {
                  actualBranch = 'origin/' + actualBranch
                }
                finalBuildUrl = 'refs/remotes/' + actualBranch
              } else if(params.BUILD_SOURCE == 'tag') {
                finalBuildUrl = 'refs/tags/' + params.BUILD_VALUE
              } else if(params.BUILD_SOURCE == 'refspec') {
                finalBuildUrl = 'refs/changes/' + params.BUILD_VALUE
                finalrefspecUrl = finalBuildUrl + ':' + finalBuildUrl
              }
              echo 'Final Build URL: ' + finalBuildUrl
              echo 'Final Refspec: ' + finalrefspecUrl
              def scmVars =  checkout([$class: 'GitSCM', branches: [[name: "${finalBuildUrl}"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CloneOption', honorRefspec: true, noTags: false, reference: '', shallow: false], [$class: 'CleanBeforeCheckout']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'jenkins-gerrit', refspec: "${finalrefspecUrl}", url: 'http://192.168.11.160:8080/MSB']]])
              echo 'SCM Commit id: ' +scmVars.GIT_COMMIT
              echo 'SCM Branch: ' +scmVars.GIT_BRANCH
            }
          }
        }

        stage('Build') {
          steps {
              withMaven(mavenSettingsConfig: "${MVN_SETTINGS}", maven: "${TOOL_MVN}", jdk: "${TOOL_JDK}") {
                sh 'mvn -f msb clean package -DskipTests -U -P ui-build,scheduler-build'
              }
           }
        }

        stage('Archive') {
          steps {
              archiveArtifacts 'msb/msb-rest/target/mysignaturebook.war'
          }
        }
    }

    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '1', daysToKeepStr: '', numToKeepStr: '1')
        durabilityHint 'PERFORMANCE_OPTIMIZED'
        disableConcurrentBuilds()
    }
}
