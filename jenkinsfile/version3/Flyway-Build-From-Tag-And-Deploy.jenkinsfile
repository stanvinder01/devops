def DOWN_BUILD = null;

pipeline {
    agent any

    parameters {
      string(name: 'TAG', defaultValue: '', trim: true,  description: 'Tag (e.g. v1.0.0)')
	  string(name: 'DB_URL', description: 'DB Url')
      string(name: 'DB_PORT', defaultValue: '3306', description: 'DB Port')
      string(name: 'DB_USER', defaultValue: 'msb', description: 'DB User')
      password(name: 'DB_PASSWORD', description: 'DB Password')
      string(name: 'FLYWAY_PROFILE', defaultValue: 'none', description: 'Flyway Profile')
      string defaultValue: '', description: 'IP of server', name: 'SERVER_IP', trim: true
      string defaultValue: '8642', description: 'Port of server', name: 'SERVER_PORT', trim: true
      string defaultValue: 'servsupport', description: 'Username', name: 'USERNAME', trim: true
      password(name: 'PASSWORD', defaultValue: '', description: 'Server password')
    }

   stages {
        stage('Trigger Flyway Job') {
          steps {
            build job: '/Platform Jobs/Version-3/Flyway', parameters: [string(name: 'BUILD_SOURCE', value: 'tag'), string(name: 'BUILD_VALUE', value: params.TAG), string(name: 'DB_URL', value: params.DB_URL), string(name: 'DB_PORT', value: params.DB_PORT), string(name: 'DB_USER', value: params.DB_USER), password(name: 'DB_PASSWORD', value: params.DB_PASSWORD.getPlainText()), string(name: 'FLYWAY_PROFILE', value: params.FLYWAY_PROFILE)], propagate: true, wait: true
          }
        }

      stage('Trigger Build Job') {
        steps {
          script {
              DOWN_BUILD = build job: '/Platform Jobs/Version-3/Build', parameters: [string(name: 'BUILD_SOURCE', value: 'tag'), string(name: 'BUILD_VALUE', value: params.TAG)], propagate: true, wait: true
          }
        }
      }

      stage('Trigger Deploy Job') {
        steps {
          build job: '/Platform Jobs/Version-3/Deploy', parameters: [string(name: 'BUILD_NO', value: "${DOWN_BUILD.number}"), booleanParam(name: 'IS_JUMPHOST', value: false), string(name: 'SERVER_IP', value: params.SERVER_IP), string(name: 'SERVER_PORT', value: params.SERVER_PORT), string(name: 'USERNAME', value: params.USERNAME), password(description: 'Server password', name: 'PASSWORD', value: params.PASSWORD.getPlainText())]
        }
      }
    }

    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '1', daysToKeepStr: '', numToKeepStr: '1')
        durabilityHint 'PERFORMANCE_OPTIMIZED'
        disableConcurrentBuilds()
    }
}